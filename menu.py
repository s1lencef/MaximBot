from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from collections import namedtuple

menus = {
    'main': {
        'type': 'reply',
        'body': [
            {
                'text': 'Main Menu',
                'buttons': [
                    KeyboardButton("üßæ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
                    KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
                    KeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
                ],
                'header': None,
                'footer': None,
                'n_cols': 1
            },
        ]
    },
    'main_simple': {
        'type': 'reply',
        'body': [
            {
                'text': 'Main Menu',
                'buttons': [
                    KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
                    KeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
                    KeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"),
                ],
                'header': None,
                'footer': None,
                'n_cols': 1
            },
        ]
    },
    'admin_global': {
        'type': 'reply',
        'body': [
            {
                'text': 'Admin Menu',
                'buttons': [
                    KeyboardButton('üìã –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'),
                    KeyboardButton("üë• –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"),
                    KeyboardButton("üé∂ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤"),
                    KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                ],
                'header': None,
                'footer': None,
                'n_cols': 1
            },
        ]
    },
    'user_change_main': {
        'type': 'inline',
        'body': [
            {
                'text': 'User Change',
                'buttons': [
                    InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="users#delete_user"),
                    InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫./–†–∞–∑–±–ª–æ–∫.", callback_data="users#ban_user"),
                    InlineKeyboardButton("üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users#see_users"),
                ],
                'header': [InlineKeyboardButton("‚úç –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="users#change_user")],
                'footer': [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")],
                'n_cols': 2
            },
        ]
    },
    'call': {
        'type': 'inline',
        'body': [
            {
                'text': 'Call Maxim Lukin',
                'buttons': [
                    InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url="https://t.me/PhantomTrack"),

                ],
                'header': None,
                'footer': None,
                'n_cols': 1
            },
        ]
    },
    'help': {
        'type': 'inline',
        'body': [
            {
                'text': 'Call Maxim Lukin',
                'buttons': [
                    InlineKeyboardButton("–ì—Ä—É–ø–ø–∞ –í–∫", url="https://vk.com/fantomtrack"),
                    InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/PhantomTrack"),

                ],
                'header': None,
                'footer': None,
                'n_cols': 1
            },
        ]
    },
    "statistics":{
        'type': 'reply',
        'body': [
            {
                'text': 'Statistics manu',
                'buttons': [
                    KeyboardButton('üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'),
                    KeyboardButton('‚úçÔ∏è –í–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ'),
                ],
                'header': None,
                'footer': None,
                'n_cols': 1
            },
        ]
    },

}


def build_menu(buttons, n_cols=1, header_buttons=None, footer_buttons=None):
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu


def get_menu(tag):
    try:
        menu_name = tag.split("#")[1]
    except:
        menu_name = tag
    try:
        menu_page = int(tag.split("#")[2])
    except:
        menu_page = 0

    try:
        cur_menu = menus[menu_name]['body'][menu_page]
        if menus[menu_name]['body'][menu_page]['text']:
            text = menus[menu_name]['body'][menu_page]['text']
        else:
            text = None
    except Exception as e:
        return False

    markup = build_menu(buttons=cur_menu['buttons'],
                        n_cols=cur_menu['n_cols'],
                        header_buttons=cur_menu['header'],
                        footer_buttons=cur_menu['footer'])

    menu = namedtuple('menu', 'reply_markup text tag page type')
    menu.tag = tag
    menu.page = menu_page
    menu.type = menus[menu_name]['type']
    menu.text = text

    if menus[menu_name]['type'] == 'inline':
        menu.reply_markup = InlineKeyboardMarkup(markup)
    if menus[menu_name]['type'] == 'reply':
        menu.reply_markup = ReplyKeyboardMarkup(keyboard=markup, resize_keyboard=True)

    return menu
